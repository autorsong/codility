A small frog wants to get to the other side of the road. The frog is currently located at position X and wants to get to a position greater than or equal to Y. The small frog always jumps a fixed distance, D.

Count the minimal number of jumps that the small frog must perform to reach its target.

Write a function:

def solution(X, Y, D)

that, given three integers X, Y and D, returns the minimal number of jumps from position X to a position equal to or greater than Y.

For example, given:

  X = 10
  Y = 85
  D = 30
the function should return 3, because the frog will be positioned as follows:

after the first jump, at position 10 + 30 = 40
after the second jump, at position 10 + 30 + 30 = 70
after the third jump, at position 10 + 30 + 30 + 30 = 100
Write an efficient algorithm for the following assumptions:

X, Y and D are integers within the range [1..1,000,000,000];
X ≤ Y.

# 문제

현재 위치 x와 목표 위치 y 값이 주어졌을 때 한 번의 이동 거리 d를 얼마나 반복하여 이동하여야 x에서 y에 도달할 수 있는 지를 구해라

# solution

def solution(X, Y, D):
    return int((Y - X) / D) if (Y - X) % D == 0 else int((Y - X) / D) + 1

간단하다.
올림 함수를 쓰면 더 간단했을듯